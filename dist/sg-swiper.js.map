{"version":3,"sources":["../src/sg-swiper.ts"],"sourcesContent":["import { SwipeSession } from \"./interfaces/SwipeSession\";\r\nimport { SwiperState } from \"./interfaces/SwipeState\";\r\nimport {\r\n  NavigationElements,\r\n  SwiperInterface,\r\n  SwiperSlide,\r\n} from \"./interfaces/Swiper\";\r\nimport { SwiperArgs } from \"./interfaces/SwiperArgs\";\r\n\r\nexport default class Swiper implements SwiperInterface {\r\n  private _state: SwiperState = {\r\n    currentIndex: 0,\r\n    currentPosition: 0,\r\n    initialized: false,\r\n    swiperWidth: 0,\r\n    slidesLoaded: true,\r\n  };\r\n  private _swipeSession: SwipeSession = {\r\n    active: false,\r\n    type: \"mouse\",\r\n    startX: 0,\r\n    startTime: 0,\r\n    velocity: 0,\r\n    isClick: false,\r\n    deltaX: 0,\r\n    lastEvent: null,\r\n    lastEventDeltaX: 0,\r\n    lastEventVelocity: 0,\r\n    direction: 0,\r\n  };\r\n\r\n  private _indexChangeCallback: ((index: number) => void) | null = null;\r\n\r\n  private _navigationElements: NavigationElements = {};\r\n\r\n  private _childrenSwipers: SwiperInterface[] | null = null;\r\n  private _slideClassName: string | null = null;\r\n  private _swiperElement: HTMLElement | null = null;\r\n  private _slidesWrapper: HTMLElement | null;\r\n  private _breakpoint: number | null = null;\r\n  private _auto: number | null = null;\r\n  private _autoInterval: NodeJS.Timeout | undefined;\r\n  private _slides: SwiperSlide[] = [];\r\n  private _slideCount: number = 0;\r\n  private _draggable: boolean = false;\r\n  private _slideLoad: ((slide: HTMLElement) => Promise<void>) | null = null;\r\n  private _slideClick: ((index: number, element: HTMLElement) => void) | null =\r\n    null;\r\n  private _eventListeners: [\r\n    HTMLElement | null | Window,\r\n    string,\r\n    (e: Event) => void\r\n  ][];\r\n  private _activeSessionEventListeners: {\r\n    mouse: [keyof DocumentEventMap, (e: MouseEvent | TouchEvent) => void][];\r\n    touch: [keyof DocumentEventMap, (e: MouseEvent | TouchEvent) => void][];\r\n  } = {\r\n      mouse: [\r\n        [\"mousemove\", this._handleMove.bind(this)],\r\n        [\"mouseup\", this._handleRelease.bind(this)],\r\n      ],\r\n      touch: [\r\n        [\"touchmove\", this._handleMove.bind(this)],\r\n        [\"touchend\", this._handleRelease.bind(this)],\r\n        [\"touchcancel\", this._handleRelease.bind(this)],\r\n      ],\r\n    };\r\n\r\n  /**\r\n  * Constructor for the Swiper class.\r\n  *\r\n  * @param {HTMLElement} element - the HTML container element to initialize the Swiper\r\n  * @param {SwiperArgs} args - optional arguments to configure the Swiper\r\n  */\r\n  constructor(element: HTMLElement, args: SwiperArgs | null = null) {\r\n    // check if element is provided and extract it\r\n    if (!element) {\r\n      console.error(\"Cannot initialize Swiper: no element provided.\");\r\n      return;\r\n    }\r\n    this._swiperElement = element;\r\n\r\n    // extract the arguments\r\n    if (args) {\r\n      this._indexChangeCallback = args.onSlideChange ?? null;\r\n      this._auto = args.auto ?? null;\r\n      this._slideClassName = args.slideClassName ?? null;\r\n      this._navigationElements = args.navigation ?? {};\r\n      this._childrenSwipers = args.linkedSwipers ?? null;\r\n      this._breakpoint = args.breakpoint ?? null;\r\n      this._slideLoad = args.slideLoad ?? null;\r\n      this._slideClick = args.onSlideClick ?? null;\r\n      this._state.slidesLoaded = args.slideLoad ? false : true;\r\n      this._draggable = args.draggable ?? false;\r\n    }\r\n\r\n    // create the list of slides\r\n    const slideCollection = this._slideClassName\r\n      ? this._swiperElement.querySelectorAll(\".\" + this._slideClassName)\r\n      : this._swiperElement.children;\r\n    if (slideCollection.length === 0) {\r\n      console.error(\"Cannot initialize Swiper: no slides found.\");\r\n      return;\r\n    }\r\n\r\n    //extract the slides wrapper\r\n    this._slidesWrapper = slideCollection[0].parentElement;\r\n\r\n    //create the list of slides\r\n    this._slides = (Array.from(slideCollection) as HTMLElement[]).map(\r\n      (slide) => {\r\n        const id = slide.id\r\n          ? slide.id\r\n          : (() => {\r\n            const generatedId =\r\n              \"slide-\" + Math.random().toString(36).substring(2, 15);\r\n            slide.id = generatedId;\r\n            return generatedId;\r\n          })();\r\n\r\n        return {\r\n          id,\r\n          element: slide,\r\n          position: 0,\r\n          width: 0,\r\n          loaded: this._slideLoad && slide.dataset.loaded === \"false\" ? false : true,\r\n        };\r\n      }\r\n    );\r\n\r\n    //set the number of slides\r\n    this._slideCount = this._slides.length;\r\n\r\n    // add the event listeners\r\n    this._eventListeners = [\r\n      [this._swiperElement, \"mouseover\", this._handleHover.bind(this)],\r\n      //[this._swiperElement, 'mouseleave', this._handleLeave.bind(this)],\r\n      [window, \"resize\", this._getDimensions.bind(this)],\r\n    ];\r\n\r\n    // add the draggable event listeners\r\n    if (this._draggable) {\r\n      this._eventListeners.push(\r\n        [this._swiperElement, \"mousedown\", this._handlePush.bind(this)],\r\n        [this._swiperElement, \"touchstart\", this._handlePush.bind(this)]\r\n      );\r\n    }\r\n\r\n    // start the swiper\r\n    this.start(args?.slideStart);\r\n  }\r\n\r\n  /**\r\n   * Start the slider at the specified index, if provided.\r\n   *\r\n   * @param {number} index - The index at which to start the slider\r\n   */\r\n  public start(index?: number) {\r\n    if (\r\n      !this._state.initialized &&\r\n      this._swiperElement &&\r\n      (!this._breakpoint || window.innerWidth < this._breakpoint)\r\n    ) {\r\n      // get the dimensions of elements to calculate properly the translations values \r\n      this._getDimensions();\r\n\r\n      // add the event listeners\r\n      this._eventListeners.forEach(([element, event, callback]) => {\r\n        element?.addEventListener(event, callback, { passive: true });\r\n      });\r\n\r\n      // add the slide click event listeners to each slides\r\n      this._slides.forEach(({ element }, index) => {\r\n        element.addEventListener(\"click\", (e: Event) => {\r\n          this._handleSlideClick(e, element, index);\r\n        });\r\n      });\r\n\r\n      // add the navigation previous slide click event listeners\r\n      if (this._navigationElements.prev)\r\n        this._navigationElements.prev.forEach((el) => {\r\n          el.addEventListener(\"click\", this._handlePrevClick.bind(this));\r\n        });\r\n\r\n      // add the navigation next slide click event listeners\r\n      if (this._navigationElements.next)\r\n        this._navigationElements.next.forEach((el) => {\r\n          el.addEventListener(\"click\", this._handleNextClick.bind(this));\r\n        });\r\n\r\n      // set the swiper initialized\r\n      this._state.initialized = true;\r\n\r\n      // set the starting index\r\n      this._setIndex(index ?? 0);\r\n\r\n      // set the auto slide interval if provided\r\n      if (this._auto) {\r\n        this._autoInterval = setInterval(() => {\r\n          if (this._slides[this._state.currentIndex].loaded) {\r\n            this._handleNextClick();\r\n          }\r\n        }, this._auto);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A private function to handle hover behavior.\r\n   */\r\n  private _handleHover() {\r\n    clearInterval(this._autoInterval);\r\n  }\r\n  /*\r\n  private _handleLeave() {\r\n        if(this._auto) {\r\n                this._autoInterval = setInterval(() => {\r\n                    if(this._slides[this._state.currentIndex].loaded) {\r\n                        this._handleNextClick();\r\n                    }\r\n                }, this._auto);\r\n            }\r\n    }\r\n  */\r\n  /**\r\n  * Handles the click event for the previous button.\r\n  */\r\n  private _handlePrevClick() {\r\n    const newIndex =\r\n      this._state.currentIndex - 1 < 0\r\n        ? this._slideCount - 1\r\n        : this._state.currentIndex - 1;\r\n    this._setIndex(newIndex);\r\n  }\r\n  /**\r\n   * Handles the click event for navigating to the next item.\r\n   */\r\n  private _handleNextClick() {\r\n    const newIndex =\r\n      this._state.currentIndex + 1 > this._slideCount - 1\r\n        ? 0\r\n        : this._state.currentIndex + 1;\r\n    this._setIndex(newIndex);\r\n  }\r\n\r\n  /**\r\n   * Handle the click event on a slide element.\r\n   *\r\n   * @param {Event} e - the click event\r\n   * @param {HTMLElement} element - the slide element\r\n   * @param {number} index - the index of the slide\r\n   */\r\n  private _handleSlideClick(e: Event, element: HTMLElement, index: number) {\r\n    e.preventDefault();\r\n    if ((this._swipeSession.isClick || !this._draggable) && this._slideClick) {\r\n      this._slideClick(index, element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update dimensions and positions of slides\r\n   */\r\n  private _getDimensions() {\r\n    // Update swiper width\r\n    this._state.swiperWidth = this._swiperElement?.offsetWidth ?? 0;\r\n\r\n    // Update slides dimensions and positions\r\n    this._slides = this._slides.map((slide) => ({\r\n      ...slide,\r\n      width: slide.element.offsetWidth,\r\n      position: slide.element.offsetLeft,\r\n    }));\r\n\r\n    // Translate to current slide if initialized\r\n    if (this._state.initialized && this._slides[this._state.currentIndex]) {\r\n      this._translate(\r\n        (this._state.swiperWidth - this._slides[this._state.currentIndex].width) / 2 -\r\n        this._slides[this._state.currentIndex].position\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stops all event listeners and resets the state of the component.\r\n   */\r\n  public stop() {\r\n\r\n    // Remove all event listeners\r\n    this._eventListeners.forEach(([element, event, callback]) => {\r\n      element?.removeEventListener(event, callback);\r\n    });\r\n\r\n    // Remove slides click event listeners\r\n    this._slides.forEach(({ element }, index) => {\r\n      element.removeEventListener(\"click\", (e: Event) => {\r\n        this._handleSlideClick(e, element, index);\r\n      });\r\n    });\r\n\r\n    // Remove navigation click event listeners\r\n    if (this._navigationElements.prev)\r\n      this._navigationElements.prev.forEach((el) => {\r\n        el.removeEventListener(\"click\", this._handlePrevClick.bind(this));\r\n      });\r\n    if (this._navigationElements.next)\r\n      this._navigationElements.next.forEach((el) => {\r\n        el.removeEventListener(\"click\", this._handleNextClick.bind(this));\r\n      });\r\n\r\n    // Reset swiper state\r\n    this._translate(0);\r\n    this._state.initialized = false;\r\n  }\r\n\r\n  /**\r\n   * Translates the slides wrapper by the specified value.\r\n   *\r\n   * @param {number} value - The value to translate by\r\n   * @param {number | null} duration - The duration of the translation, defaults to null\r\n   */\r\n  private _translate(value: number, duration: number | null = null) {\r\n    if (this._slidesWrapper) {\r\n      this._slidesWrapper.style.transform = `translate3d(${value}px, 0, 0)`;\r\n      if (duration)\r\n        this._slidesWrapper.style.transition = `${duration}ms cubic-bezier(.08,.5,.2,1) transform`;\r\n    }\r\n\r\n    this._state.currentPosition = value;\r\n  }\r\n\r\n  /**\r\n   * Handles the push event triggered by a mouse click or touch on the swiper element.\r\n   *\r\n   * @param {MouseEvent | TouchEvent} e - The event object.\r\n   * @return {void} \r\n   */\r\n  private _handlePush(e: MouseEvent | TouchEvent) {\r\n    // get focus and remose text selection in window when starting to interact with the swiper\r\n    this._swiperElement?.focus();\r\n    window.getSelection()?.removeAllRanges();\r\n\r\n    // start a new swipe session\r\n    this._swipeSession = {\r\n      active: true,\r\n      type: e.type === \"mousedown\" ? \"mouse\" : \"touch\",\r\n      startX:\r\n        e.type === \"mousedown\"\r\n          ? (e as MouseEvent).clientX\r\n          : (e as TouchEvent).touches[0].clientX,\r\n      startTime: e.timeStamp,\r\n      velocity: 0,\r\n      isClick: false,\r\n      deltaX: 0,\r\n      lastEvent: e,\r\n      lastEventDeltaX: 0,\r\n      lastEventVelocity: 0,\r\n      direction: 0,\r\n    };\r\n\r\n    // add event listeners for the current swipe session (move and release)\r\n    this._activeSessionEventListeners[this._swipeSession.type].forEach(\r\n      ([event, callback]) => {\r\n        document.addEventListener(event, callback as any, { passive: true });\r\n      }\r\n    );\r\n\r\n    this._triggerEvent(\"push\");\r\n  }\r\n\r\n  /**\r\n   * Handles the release action triggered by a mouse up or touch end.\r\n   *\r\n   */\r\n  private _handleRelease() {\r\n    // stop the current swipe session\r\n    this._swipeSession.active = false;\r\n\r\n    // remove event listeners for the current swipe session\r\n    this._activeSessionEventListeners[this._swipeSession.type].forEach(\r\n      ([event, callback]) => {\r\n        document.removeEventListener(event, callback as any);\r\n      }\r\n    );\r\n    // check if the swipe was a click\r\n    if (\r\n      this._swipeSession.deltaX < 5 &&\r\n      (this._swipeSession.lastEvent as Event).timeStamp -\r\n      this._swipeSession.startTime <\r\n      200\r\n    ) {\r\n      this._swipeSession.isClick = true;\r\n    }\r\n\r\n    this._triggerEvent(\"release\");\r\n  }\r\n\r\n  /**\r\n   * Do an action based on the given event type.\r\n   *\r\n   * @param {(\"release\" | \"push\" | \"move\")} ev - The type of event to trigger\r\n   */\r\n  private _triggerEvent(ev: \"release\" | \"push\" | \"move\") {\r\n    if (ev === \"release\") {\r\n      this._setIndex(this._state.currentIndex);\r\n      /*\r\n      if(this._swipeSession.type === 'touch') {\r\n              this._handleLeave();\r\n      }\r\n      */\r\n    }\r\n\r\n    if (ev === \"move\") {\r\n      // calculate the new translate position and translate slider\r\n      const newTranslate = this._state.currentPosition + this._swipeSession.lastEventDeltaX;\r\n      this._translate(newTranslate);\r\n      // calculate the new index based on slider position\r\n      const newIndex = this._getIndexByPosition(-newTranslate);\r\n      // set the new index\r\n      if (newIndex > -1) this._setIndex(newIndex, false);\r\n    }\r\n\r\n    if (ev === \"push\") {\r\n      // if the push was triggered by touch action, handle hover\r\n      if (this._swipeSession.type === \"touch\") {\r\n        this._handleHover();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle the move event, updating swipe session data and triggering move to do related actions.\r\n   *\r\n   * @param {MouseEvent | TouchEvent} e - The mouse or touch event\r\n   * @return {void} \r\n   */\r\n  private _handleMove(e: MouseEvent | TouchEvent) {\r\n    if (!this._swipeSession.active) return;\r\n    const { type, startX, lastEvent } = this._swipeSession;\r\n\r\n    // get the current mouse or touch position\r\n    const clientX = type === \"mouse\"\r\n      ? (e as MouseEvent).clientX\r\n      : (e as TouchEvent).touches[0].clientX;\r\n    const lastClientX = type === \"mouse\"\r\n      ? (lastEvent as MouseEvent).clientX\r\n      : (lastEvent as TouchEvent).touches[0].clientX;\r\n\r\n    this._swipeSession.lastEvent = e;\r\n\r\n    // calculate the delta and velocity\r\n    this._swipeSession.deltaX = clientX - startX;\r\n    this._swipeSession.velocity = this._swipeSession.deltaX / (e.timeStamp - this._swipeSession.startTime);\r\n    this._swipeSession.lastEventDeltaX = clientX - lastClientX;\r\n\r\n    this._swipeSession.lastEventVelocity = this._swipeSession.lastEventDeltaX === 0\r\n      ? this._swipeSession.lastEventVelocity\r\n      : this._swipeSession.lastEventDeltaX / (e.timeStamp - (lastEvent as MouseEvent | TouchEvent).timeStamp);\r\n    this._swipeSession.direction = Math.sign(this._swipeSession.lastEventDeltaX) as -1 | 0 | 1;\r\n\r\n    this._triggerEvent(\"move\");\r\n  }\r\n\r\n  /**\r\n   * Sets the index of the slider and optionally performs a translation.\r\n   *\r\n   * @param {number} index - The index to set.\r\n   * @param {boolean} translate - Optional flag to perform translation. Defaults to true.\r\n   */\r\n  private _setIndex(index: number, translate: boolean = true) {\r\n\r\n    //Slides need to be lazy loaded\r\n    if (!this._state.slidesLoaded && this._slideLoad) {\r\n      this._slideLoad(this._slides[index]?.element)\r\n        .then(() => {\r\n          this._slides[index].loaded = true;\r\n          this._checkIfAllLoaded();\r\n          if (!this._state.slidesLoaded && this._slides[index + 1])\r\n            (this._slideLoad as any)(this._slides[index + 1].element).then(\r\n              () => {\r\n                this._slides[index + 1].loaded = true;\r\n                this._checkIfAllLoaded();\r\n              }\r\n            );\r\n        })\r\n        .catch((err) => {\r\n          console.error(err);\r\n        });\r\n    }\r\n\r\n    // if translate is needed then perform translation\r\n    if (translate && this._slides[index]) this._translate(\r\n      (this._state.swiperWidth - this._slides[index].width) / 2 -\r\n      this._slides[index].position,\r\n      500\r\n    );\r\n\r\n    // handle classnames\r\n    this._slides[index]?.element.classList.add(\"is-active\");\r\n    this._swiperElement?.classList.remove(\"is-first\", \"is-last\");\r\n    if (index === 0) {\r\n      this._swiperElement?.classList.add(\"is-first\");\r\n    } else if (index === this._slideCount - 1) {\r\n      this._swiperElement?.classList.add(\"is-last\");\r\n    }\r\n\r\n    if (index === this._state.currentIndex) return; // no change\r\n\r\n    // remose active classname to old active slide\r\n    this._slides[this._state.currentIndex].element.classList.remove(\r\n      \"is-active\"\r\n    );\r\n    // update current index\r\n    this._state.currentIndex = index;\r\n\r\n    // call index change callback\r\n    if (this._indexChangeCallback) this._indexChangeCallback(index);\r\n\r\n    //if children swipers are connected perform index change to connected swipers\r\n    if (this._childrenSwipers) {\r\n      this._childrenSwipers.forEach((swiper) => {\r\n        swiper.index = index;\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves the active index based on the given position.\r\n   *\r\n   * @param {number} translate - the position to search for\r\n   * @return {number} the index of the slide\r\n   */\r\n  private _getIndexByPosition(translate: number) {\r\n    return this._slides.findIndex(\r\n      (slide) =>\r\n        slide.position + slide.width / 2 > translate &&\r\n        translate > slide.position - slide.width / 2\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Check if all slides are loaded.\r\n   */\r\n  private _checkIfAllLoaded() {\r\n    this._state.slidesLoaded = this._slides.every((slide) => slide.loaded);\r\n  }\r\n\r\n  get index() {\r\n    return this._state.currentIndex;\r\n  }\r\n\r\n  set index(index) {\r\n    this._setIndex(index);\r\n  }\r\n\r\n  /**\r\n   * setter for slide click callback\r\n   *\r\n   * @param {function} callback - callback function to be invoked on slide click\r\n   * @return {void} \r\n   */\r\n  set slideClick(callback: (index: number, element: HTMLElement) => void) {\r\n    this._slideClick = callback;\r\n  }\r\n}"],"mappings":"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","names":["index"]}