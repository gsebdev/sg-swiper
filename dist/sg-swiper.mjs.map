{"version":3,"sources":["../src/SlideMap.ts","../src/sg-swiper.ts"],"sourcesContent":["import { SwiperSlide } from \"./interfaces/Swiper\";\r\n\r\nexport default class SlideMap extends Map<string, SwiperSlide> {\r\n    _allSlidesLoaded: boolean = false;\r\n    _firstKey: string | undefined\r\n    _lastKey: string | undefined\r\n    /**\r\n   * Retrieves the slide given the index position.\r\n   */\r\n    getSlideByIndex = (index: number | undefined): [string, SwiperSlide] | null => {\r\n        if(index === undefined) return null;\r\n        for (const [id, slide] of this.entries()) {\r\n            if (index === slide.index) {\r\n                return [id, slide];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getSlidesScrollWidth = (): number => {\r\n        const { width, position } = Array.from(this.values()).pop() ?? {};\r\n        return width && position ? width + position : 0;\r\n    }\r\n\r\n    updateSlideDimensions = (id?: string, args?: { width?: number, position?: number }) => {\r\n        if (id) {\r\n            const slide = this.get(id)\r\n            if (slide) {\r\n                slide.width = args?.width ?? slide.element.offsetWidth;\r\n                slide.position = args?.position ?? slide.element.offsetLeft;\r\n            }\r\n        } else {\r\n            for (const slide of this.values()) {\r\n                slide.width = slide.element.offsetWidth;\r\n                slide.position = slide.element.offsetLeft;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    set(id: string, slide: SwiperSlide) {\r\n        if (this.entries.length === 0) {\r\n            this._firstKey = id;\r\n        }\r\n        super.set(id, slide);\r\n        this._lastKey = id;\r\n        return this;\r\n    }\r\n\r\n    delete(key: string): boolean {\r\n        const deleted = super.delete(key);\r\n        if (deleted) {\r\n            Array.from(this.keys())\r\n            this._lastKey = Array.from(this.keys()).pop();\r\n            this._firstKey = Array.from(this.keys())[0];\r\n        }\r\n        return deleted\r\n    }\r\n\r\n    /**\r\n     * getter to know if all slides are loaded.\r\n     */\r\n    get allSlidesLoaded(): boolean {\r\n        if (this._allSlidesLoaded === true) {\r\n            return true;\r\n        } else {\r\n            let allLoaded = true;\r\n            for (const { loaded } of this.values()) {\r\n                if (!loaded) {\r\n                    allLoaded = false;\r\n                    break;\r\n                }\r\n            }\r\n            this._allSlidesLoaded = allLoaded;\r\n            return allLoaded;\r\n        }\r\n    }\r\n    get last(): SwiperSlide | undefined {\r\n        if (this._lastKey === undefined) {\r\n            return;\r\n        }\r\n        return this.get(this._lastKey);\r\n    }\r\n\r\n    get first(): SwiperSlide | undefined {\r\n        if (this._firstKey === undefined) {\r\n            return;\r\n        }\r\n        return this.get(this._firstKey);\r\n    }\r\n}","import SlideMap from \"./SlideMap\";\r\nimport { SwipeSession } from \"./interfaces/SwipeSession\";\r\nimport { SwiperState } from \"./interfaces/SwipeState\";\r\nimport {\r\n  NavigationElements,\r\n  SwiperInterface,\r\n} from \"./interfaces/Swiper\";\r\nimport { SwiperArgs } from \"./interfaces/SwiperArgs\";\r\n\r\nexport default class Swiper implements SwiperInterface {\r\n  _state: SwiperState = {\r\n    currentIndex: undefined,\r\n    currentPosition: 0,\r\n    initialized: false,\r\n    swiperWidth: 0,\r\n    slidesScrollWidth: 0,\r\n    noTranslate: false\r\n  };\r\n  _swipeSession: SwipeSession = {\r\n    active: false,\r\n    type: \"mouse\",\r\n    startX: 0,\r\n    startTime: 0,\r\n    velocity: 0,\r\n    isClick: false,\r\n    deltaX: 0,\r\n    lastEvent: null,\r\n    lastEventDeltaX: 0,\r\n    lastEventVelocity: 0,\r\n    direction: 0,\r\n  };\r\n\r\n  _indexChangeCallback: ((index: number) => void) | null = null;\r\n  _resizeObserver: ResizeObserver | null = null;\r\n  _resizeTimeout: NodeJS.Timeout | undefined;\r\n\r\n  _navigationElements: NavigationElements = {};\r\n\r\n  _childrenSwipers: SwiperInterface[] | null = null;\r\n  _slideClassName: string | null = null;\r\n  _swiperElement: HTMLElement | null = null;\r\n  _slidesWrapper: HTMLElement | null;\r\n  _auto: number | null = null;\r\n  _autoInterval: NodeJS.Timeout | undefined;\r\n  _slides: SlideMap = new SlideMap();\r\n  _slideCount: number = 0;\r\n  _draggable: boolean = false;\r\n  _limitToEdges: boolean = false;\r\n  _slideLoad: ((slide: HTMLElement) => Promise<void>) | null = null;\r\n  _slideClick: ((index: number, element: HTMLElement) => void) | null =\r\n    null;\r\n  _eventListeners: [\r\n    HTMLElement | null | Window,\r\n    string,\r\n    (e: Event) => void,\r\n    { capture?: boolean, passive?: boolean }?\r\n  ][] = [];\r\n  _activeSessionEventListeners: {\r\n    mouse: [keyof DocumentEventMap, (e: MouseEvent | TouchEvent) => void][];\r\n    touch: [keyof DocumentEventMap, (e: MouseEvent | TouchEvent) => void][];\r\n  };\r\n\r\n  /**\r\n  * Constructor for the Swiper class.\r\n  *\r\n  * @param {HTMLElement} element - the HTML container element to initialize the Swiper\r\n  * @param {SwiperArgs} args - optional arguments to configure the Swiper\r\n  */\r\n  constructor(element: HTMLElement, args: SwiperArgs | null = null) {\r\n    // check if element is provided and extract it\r\n    if (!element) {\r\n      console.error(\"Cannot initialize Swiper: no element provided.\");\r\n      return;\r\n    }\r\n    this._swiperElement = element;\r\n\r\n    // extract the arguments\r\n    if (args) {\r\n      this._indexChangeCallback = args.onSlideChange ?? null;\r\n      this._auto = args.auto ?? null;\r\n      this._slideClassName = args.slideClassName ?? null;\r\n      this._navigationElements = args.navigation ?? {};\r\n      this._childrenSwipers = args.linkedSwipers ?? null;\r\n      this._slideLoad = args.slideLoad ?? null;\r\n      this._slideClick = args.onSlideClick ?? null;\r\n      this._draggable = args.draggable ?? false;\r\n      this._limitToEdges = args.limitToEdges ?? false;\r\n    }\r\n\r\n    // create the list of slides\r\n    const slideCollection = this._slideClassName\r\n      ? this._swiperElement.querySelectorAll(\".\" + this._slideClassName)\r\n      : this._swiperElement.firstElementChild?.children ?? [];\r\n    if (slideCollection.length === 0) {\r\n      console.error(\"Cannot initialize Swiper: no slides found.\");\r\n      return;\r\n    }\r\n\r\n    //extract the slides wrapper\r\n    this._slidesWrapper = slideCollection[0].parentElement;\r\n\r\n    //create the list of slides\r\n    (Array.from(slideCollection) as HTMLElement[]).forEach((slide, index) => {\r\n      const id = slide.id\r\n        ? slide.id\r\n        : (() => {\r\n          const generatedId =\r\n            \"slide-\" + Math.random().toString(36).substring(2, 15);\r\n          slide.id = generatedId;\r\n          return generatedId;\r\n        })();\r\n\r\n      this._slides.set(id, {\r\n        index,\r\n        element: slide,\r\n        position: 0,\r\n        width: 0,\r\n        loaded: this._slideLoad ? false : true,\r\n      });\r\n    });\r\n\r\n    //set the number of slides\r\n    this._slideCount = slideCollection.length;\r\n\r\n    // set the eventListeners when a swiper session is activated\r\n    this._activeSessionEventListeners = {\r\n      mouse: [\r\n        [\"mousemove\", this._handleMove],\r\n        [\"mouseup\", this._handleRelease],\r\n      ],\r\n      touch: [\r\n        [\"touchmove\", this._handleMove],\r\n        [\"touchend\", this._handleRelease],\r\n        [\"touchcancel\", this._handleRelease],\r\n      ],\r\n    };\r\n    // add the auto event listeners\r\n    if(this._auto && this._auto > 1000 ) {\r\n      this._eventListeners.push(\r\n        [this._swiperElement, \"mouseover\", this._handleHover.bind(this), { passive: true }],\r\n        [this._swiperElement, \"mouseout\", this._handleLeave.bind(this), { passive: true }]\r\n      );\r\n      this._childrenSwipers?.forEach((swiper) => {\r\n        if(!swiper.container) return;\r\n        this._eventListeners.push(\r\n          [swiper.container, \"mouseover\", this._handleHover.bind(this), { passive: true }],\r\n          [swiper.container, \"mouseout\", this._handleLeave.bind(this), { passive: true }]\r\n        );\r\n      });\r\n    }\r\n\r\n    // add the draggable event listeners\r\n    if (this._draggable) {\r\n      this._eventListeners.push(\r\n        //@ts-ignore\r\n        [this._swiperElement, \"mousedown\", this._handlePush, { passive: true }],\r\n        [this._swiperElement, \"touchstart\", this._handlePush, { passive: true }],\r\n        [this._swiperElement, \"selectstart\", this._preventDefault, { capture: true }],\r\n        [this._swiperElement, \"dragstart\", this._preventDefault, { capture: true }]\r\n      );\r\n    }\r\n    this._resizeObserver = new ResizeObserver(this._handleResize);\r\n    // start the swiper\r\n    this.start(args?.slideStart);\r\n  }\r\n\r\n  /**\r\n   * Start the slider at the specified index, if provided.\r\n   *\r\n   * @param {number} index - The index at which to start the slider\r\n   */\r\n  start = (index?: number) => {\r\n    if (!this._state.initialized && this._swiperElement) {\r\n\r\n      // add the event listeners\r\n      this._eventListeners.forEach(([element, event, callback, options]) => {\r\n        element?.addEventListener(event, callback, options);\r\n      });\r\n\r\n      // add the slide click event listeners to each slides\r\n      this._slides.forEach(({ element, index }) => {\r\n        element.addEventListener(\"click\", (e: Event) => {\r\n          this._handleSlideClick(e, element, index);\r\n        });\r\n      });\r\n\r\n      // add the navigation previous slide click event listeners\r\n      if (this._navigationElements.prev)\r\n        this._navigationElements.prev.forEach((el) => {\r\n          el.addEventListener(\"click\", this._handlePrevClick.bind(this));\r\n        });\r\n\r\n      // add the navigation next slide click event listeners\r\n      if (this._navigationElements.next)\r\n        this._navigationElements.next.forEach((el) => {\r\n          el.addEventListener(\"click\", this._handleNextClick.bind(this));\r\n        });\r\n\r\n      // add the resize observer\r\n      this._resizeObserver?.observe(this._swiperElement);\r\n      this._state.swiperWidth = this._swiperElement.clientWidth\r\n\r\n      // set the swiper initialized\r\n      this._state.initialized = true;\r\n      this._setIndex(index ?? 0);\r\n\r\n      // set the auto slide interval if provided\r\n      if (this._auto && this._auto > 1000) {\r\n        this._handleLeave();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A function to handle hover behavior.\r\n   */\r\n  _handleHover = () => {\r\n    clearInterval(this._autoInterval);\r\n\r\n  }\r\n  /**\r\n   * A function to handle hover behavior.\r\n   */\r\n  _handleLeave = () => {\r\n    if(!this._auto) return;\r\n    \r\n    clearInterval(this._autoInterval);\r\n    \r\n    this._autoInterval = setInterval(() => {\r\n      const [, slide] = this._slides.getSlideByIndex(this._state?.currentIndex) ?? [];\r\n      if (slide?.loaded) {\r\n        this._handleNextClick();\r\n      }\r\n    }, this._auto);\r\n  }\r\n\r\n  /**\r\n   * A function to prevent the default behavior of the event.\r\n   *\r\n   * @param {Event} e - the event\r\n   */\r\n  _preventDefault = (e: Event) => {\r\n    e.preventDefault();\r\n  }\r\n\r\n  /**\r\n  * Handles the click event for the previous button.\r\n  */\r\n  _handlePrevClick = () => {\r\n    if (this._state.currentIndex !== undefined) {\r\n      const newIndex =\r\n        this._state.currentIndex - 1 < 0\r\n          ? this._slideCount - 1\r\n          : this._state.currentIndex - 1;\r\n      this._setIndex(newIndex);\r\n    }\r\n\r\n  }\r\n  /**\r\n   * Handles the click event for navigating to the next item.\r\n   */\r\n  _handleNextClick = () => {\r\n    if (this._state.currentIndex !== undefined) {\r\n      const newIndex =\r\n        this._state.currentIndex + 1 > this._slideCount - 1\r\n          ? 0\r\n          : this._state.currentIndex + 1;\r\n      this._setIndex(newIndex);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle the click event on a slide element.\r\n   *\r\n   * @param {Event} e - the click event\r\n   * @param {HTMLElement} element - the slide element\r\n   * @param {number} index - the index of the slide\r\n   */\r\n  _handleSlideClick = (e: Event, element: HTMLElement, index: number) => {\r\n    e.preventDefault();\r\n    if ((this._swipeSession.isClick || !this._draggable) && this._slideClick) {\r\n      this._slideClick(index, element);\r\n    }\r\n  }\r\n\r\n  _handleResize = (entries: ResizeObserverEntry[]) => {\r\n    clearTimeout(this._resizeTimeout);\r\n    for (const entry of entries) {\r\n      if (entry.target === this._swiperElement) {\r\n        this._state.swiperWidth = entry.contentBoxSize[0].inlineSize;\r\n      }\r\n    }\r\n    this._resizeTimeout = setTimeout(() => {\r\n      this._setIndex(this._getIndexByPosition(this._state.currentPosition), 200);\r\n    }, 80);\r\n  }\r\n\r\n  /**\r\n   * Update dimensions and positions of slides\r\n   */\r\n  _updateDimensions = (): boolean => {\r\n    const state = this._state;\r\n    const swiper = this._swiperElement;\r\n\r\n    this._slides.updateSlideDimensions();\r\n    state.slidesScrollWidth = this._slides.getSlidesScrollWidth();\r\n\r\n    // check translate ability\r\n    if (state.slidesScrollWidth <= state.swiperWidth) {\r\n      // stop translating\r\n      this._translate(0);\r\n      state.noTranslate = true;\r\n      swiper?.classList.add('no-translate');\r\n      return false;\r\n    } else {\r\n      state.noTranslate = false;\r\n      swiper?.classList.remove('no-translate');\r\n      return true\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stops all event listeners and resets the state of the component.\r\n   */\r\n  stop = () => {\r\n    // Remove resize observer\r\n    if (this._resizeObserver) {\r\n      this._resizeObserver.disconnect();\r\n    }\r\n    // Remove all event listeners\r\n    this._eventListeners.forEach(([element, event, callback, options]) => {\r\n      element?.removeEventListener(event, callback, options);\r\n    });\r\n\r\n    // Remove slides click event listeners\r\n    this._slides.forEach(({ element, index }) => {\r\n      element.removeEventListener(\"click\", (e: Event) => {\r\n        this._handleSlideClick(e, element, index);\r\n      });\r\n    });\r\n\r\n    // Remove navigation click event listeners\r\n    if (this._navigationElements.prev)\r\n      this._navigationElements.prev.forEach((el) => {\r\n        el.removeEventListener(\"click\", this._handlePrevClick.bind(this));\r\n      });\r\n    if (this._navigationElements.next)\r\n      this._navigationElements.next.forEach((el) => {\r\n        el.removeEventListener(\"click\", this._handleNextClick.bind(this));\r\n      });\r\n\r\n    // Clear auto slide interval\r\n    if (this._autoInterval) {\r\n      clearInterval(this._autoInterval);\r\n    }\r\n    // Reset swiper state\r\n    this._translate(0);\r\n    this._state.initialized = false;\r\n  }\r\n\r\n  /**\r\n   * Translates the slides wrapper by the specified value.\r\n   *\r\n   * @param {number} value - The value to translate by\r\n   * @param {number | null} duration - The duration of the translation, defaults to null\r\n   */\r\n  _translate = (value: number, duration: number | null = null) => {\r\n    // prevnet translating if no translate\r\n    if (this._state.noTranslate) {\r\n      if (this._state.currentPosition !== 0) {\r\n        value = 0;\r\n      } else {\r\n        return;\r\n      }\r\n    }\r\n    if (this._slidesWrapper) {\r\n      this._slidesWrapper.style.transform = `translate3d(${value}px, 0, 0)`;\r\n      if (duration) {\r\n        this._slidesWrapper.style.transition = `${duration}ms cubic-bezier(.08,.5,.2,1) transform`;\r\n      } else {\r\n        this._slidesWrapper.style.transition = \"none\";\r\n      }\r\n\r\n    }\r\n    this._state.currentPosition = value;\r\n  }\r\n\r\n  /**\r\n   * Handles the push event triggered by a mouse click or touch on the swiper element.\r\n   *\r\n   */\r\n  _handlePush = (e: MouseEvent | TouchEvent): void => {\r\n    // get focus and remose text selection in window when starting to interact with the swiper\r\n    this._swiperElement?.focus();\r\n    window.getSelection()?.removeAllRanges();\r\n    const clientX = (e as MouseEvent).clientX ?? (e as TouchEvent).touches[0]?.clientX ?? null\r\n    // start a new swipe session\r\n    this._swipeSession = {\r\n      active: true,\r\n      type: e.type === \"mousedown\" ? \"mouse\" : \"touch\",\r\n      startX: clientX,\r\n      startTime: e.timeStamp,\r\n      velocity: 0,\r\n      isClick: false,\r\n      deltaX: 0,\r\n      lastEvent: e,\r\n      lastEventDeltaX: 0,\r\n      lastEventVelocity: 0,\r\n      direction: 0,\r\n    };\r\n    // add event listeners for the current swipe session (move and release)\r\n    this._activeSessionEventListeners[this._swipeSession.type].forEach(\r\n      ([event, callback]) => {\r\n        document.addEventListener(event, callback as any, { passive: true });\r\n      }\r\n    );\r\n\r\n    this._triggerEvent(\"push\");\r\n  }\r\n\r\n  /**\r\n   * Handles the release action triggered by a mouse up or touch end.\r\n   *\r\n   */\r\n  _handleRelease = () => {\r\n\r\n    // stop the current swipe session\r\n    this._swipeSession.active = false;\r\n\r\n    // remove event listeners for the current swipe session\r\n    this._activeSessionEventListeners[this._swipeSession.type].forEach(\r\n      ([event, callback]) => {\r\n        document.removeEventListener(event, callback as any);\r\n      }\r\n    );\r\n    // check if the swipe was a click\r\n    if (\r\n      this._swipeSession.deltaX < 5 &&\r\n      (this._swipeSession.lastEvent as Event).timeStamp -\r\n      this._swipeSession.startTime <\r\n      200\r\n    ) {\r\n      this._swipeSession.isClick = true;\r\n    }\r\n\r\n    this._triggerEvent(\"release\");\r\n  }\r\n\r\n  /**\r\n   * Do an action based on the given event type.\r\n   *\r\n   * @param {(\"release\" | \"push\" | \"move\")} ev - The type of event\r\n   */\r\n  _triggerEvent = (ev: \"release\" | \"push\" | \"move\") => {\r\n    if (ev === \"release\") {\r\n      this._setIndex(this._state?.currentIndex);\r\n    }\r\n\r\n    if (ev === \"move\") {\r\n      if (this._state.noTranslate) return;\r\n\r\n      // calculate the new translate position and translate slider\r\n      const newTranslate = this._state.currentPosition + this._swipeSession.lastEventDeltaX;\r\n      this._translate(newTranslate);\r\n      // calculate the new index based on slider position\r\n      const newIndex = this._getIndexByPosition(newTranslate);\r\n      // set the new index\r\n      if (newIndex !== this._state.currentIndex) this._setIndex(newIndex, false);\r\n    }\r\n\r\n    if (ev === \"push\") {\r\n      // if the push was triggered by touch action, handle hover\r\n      if (this._swipeSession.type === \"touch\") {\r\n        this._handleHover();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle the move event, updating swipe session data and triggering move to do related actions.\r\n   */\r\n  _handleMove = (e: MouseEvent | TouchEvent): void => {\r\n    if (!this._swipeSession.active || this._state.noTranslate) return;\r\n    const { type, startX, lastEvent } = this._swipeSession;\r\n\r\n    // get the current mouse or touch position\r\n    const clientX = type === \"mouse\"\r\n      ? (e as MouseEvent).clientX\r\n      : (e as TouchEvent).touches[0].clientX;\r\n    const lastClientX = type === \"mouse\"\r\n      ? (lastEvent as MouseEvent).clientX\r\n      : (lastEvent as TouchEvent).touches[0].clientX;\r\n\r\n    this._swipeSession.lastEvent = e;\r\n\r\n    // calculate the delta and velocity\r\n    this._swipeSession.deltaX = clientX - startX;\r\n    this._swipeSession.velocity = this._swipeSession.deltaX / (e.timeStamp - this._swipeSession.startTime);\r\n    this._swipeSession.lastEventDeltaX = clientX - lastClientX;\r\n\r\n    this._swipeSession.lastEventVelocity = this._swipeSession.lastEventDeltaX === 0\r\n      ? this._swipeSession.lastEventVelocity\r\n      : this._swipeSession.lastEventDeltaX / (e.timeStamp - (lastEvent as MouseEvent | TouchEvent).timeStamp);\r\n    this._swipeSession.direction = Math.sign(this._swipeSession.lastEventDeltaX) as -1 | 0 | 1;\r\n\r\n    this._triggerEvent(\"move\");\r\n  }\r\n\r\n  /**\r\n   * Sets the index of the slider and optionally performs a translation.\r\n   *\r\n   * @param {number} index - The index to set.\r\n   * @param {boolean} translate - Optional flag to perform translation. Defaults to true.\r\n   */\r\n  _setIndex = (index: number | null | undefined, translate: boolean | number = true): void => {\r\n\r\n    const state = this._state;\r\n    if (!state.initialized || index === undefined || index === null) return;\r\n\r\n    const [, activeSlide] = this._slides.getSlideByIndex(index) ?? [];\r\n    const [, lastActiveSlide] = this._slides.getSlideByIndex(state.currentIndex) ?? [];\r\n\r\n    if (!activeSlide) {\r\n      console.error('no active slide', index);\r\n      return;\r\n    }\r\n    this._updateDimensions();\r\n    //Slides need to be lazy loaded\r\n    if (!this._slides.allSlidesLoaded && this._slideLoad) {\r\n      // if no translate is set, that means slides are all visible, then load everything\r\n      if (state.noTranslate) {\r\n        this._slides.forEach((slide) => {\r\n          (this._slideLoad as any)(slide.element).then(() => {\r\n            slide.loaded = true;\r\n            this._slides.allSlidesLoaded\r\n          })\r\n        })\r\n      } else { /// swiper is translating, progressive load then        \r\n        //load active slide\r\n        if (activeSlide) {\r\n          // calc adjacent visible slides\r\n          const numOfAdjacentSlidesVisible = Math.max(0, Math.ceil(((state.swiperWidth / activeSlide.width) - 1)));\r\n          // load active slide\r\n          this._slideLoad(activeSlide.element)\r\n            .then(() => {\r\n              activeSlide.loaded = true;\r\n              // load adjacent visible slides\r\n              if (!this._slides.allSlidesLoaded && numOfAdjacentSlidesVisible <= this._slideCount) {\r\n                for (let i = 1; i <= numOfAdjacentSlidesVisible; i++) {\r\n                  const [, adjRightSlide] = this._slides.getSlideByIndex(index + i) ?? [];\r\n                  const [, adjLeftSlide] = this._slides.getSlideByIndex(index - i) ?? [];\r\n                  if (adjRightSlide && !adjRightSlide.loaded) {\r\n                    (this._slideLoad as any)(adjRightSlide.element)\r\n                      .then(() => {\r\n                        adjRightSlide.loaded = true;\r\n                      })\r\n                  }\r\n                  if (adjLeftSlide && !adjLeftSlide.loaded) {\r\n                    (this._slideLoad as any)(adjLeftSlide.element)\r\n                      .then(() => {\r\n                        adjLeftSlide.loaded = true;\r\n                      })\r\n                  }\r\n                }\r\n              }\r\n            })\r\n            .catch((err) => {\r\n              console.error(err);\r\n            });\r\n        }\r\n      }\r\n    }\r\n\r\n    // if translate is needed then perform translation\r\n    if (translate !== false && !state.noTranslate) {\r\n\r\n      let value = (state.swiperWidth - activeSlide.width) / 2 - activeSlide.position\r\n\r\n      //if stick to edges\r\n      if (this._limitToEdges) {\r\n        const limit = state.swiperWidth - state.slidesScrollWidth;\r\n\r\n        const [, firstSlide] = this._slides.getSlideByIndex(0) ?? [];\r\n        const [, lastSlide] = this._slides.getSlideByIndex(this._slideCount - 1) ?? [];\r\n\r\n        const stickToStart = firstSlide && (value > -1 * firstSlide.width / 2) ? true : false;\r\n        const stickToEnd = lastSlide && (value < limit + (lastSlide.width / 2)) ? true : false;\r\n\r\n        this._clearPositionClassNames();\r\n        if (stickToEnd && stickToStart) {\r\n          if (state.currentPosition < value) { // it goes towards the end\r\n            value = limit;\r\n            this._setLastClassNames();\r\n          } else { // it goes towards the start\r\n            value = 0;\r\n            this._setFirstClassNames\r\n          }\r\n        } else if (stickToStart) {\r\n          value = 0;\r\n          this._setFirstClassNames();\r\n        } else if (stickToEnd) {\r\n          value = limit;\r\n          this._setLastClassNames();\r\n        } else {\r\n          value = Math.min(0, Math.max(limit, value));\r\n        }\r\n      }\r\n      this._translate(value, typeof translate === \"number\" ? translate : 500);\r\n    }\r\n\r\n    // handle classnames\r\n    activeSlide.element.classList.add(\"is-active\");\r\n    if (index === 0) {\r\n      this._setFirstClassNames();\r\n    } else if (index === this._slideCount - 1) {\r\n      this._setLastClassNames();\r\n    }\r\n\r\n    if (index === state.currentIndex) return; // no change\r\n\r\n    // update current index\r\n    state.currentIndex = state.noTranslate ? undefined :index;\r\n    // remove active classname to old active slide\r\n    lastActiveSlide?.element.classList.remove(\"is-active\");\r\n    // update current index\r\n\r\n    // call index change callback\r\n    if (this._indexChangeCallback) this._indexChangeCallback(index);\r\n\r\n    //if children swipers are connected perform index change to connected swipers\r\n    if (this._childrenSwipers) {\r\n      this._childrenSwipers.forEach((swiper) => {\r\n        swiper.index = index;\r\n      });\r\n    }\r\n  }\r\n  _clearPositionClassNames() {\r\n    this._swiperElement?.classList.remove(\"is-first\");\r\n    this._swiperElement?.classList.remove(\"is-last\");\r\n  }\r\n  _setFirstClassNames() {\r\n    this._swiperElement?.classList.remove(\"is-last\");\r\n    this._swiperElement?.classList.add(\"is-first\");\r\n  }\r\n  _setLastClassNames() {\r\n    this._swiperElement?.classList.remove(\"is-first\");\r\n    this._swiperElement?.classList.add(\"is-last\");\r\n  }\r\n\r\n  /**\r\n   * Retrieves the active index based on the given position.\r\n   */\r\n  _getIndexByPosition = (translate: number): number | undefined => {\r\n    const { swiperWidth, slidesScrollWidth, currentIndex } = this._state;\r\n    const scrollAvailable = slidesScrollWidth - swiperWidth;\r\n    const minScrollAvailableToDetectByMiddle = this._slides.first && this._slides.last ? (this._slides.first.width / 2 + this._slides.last.width / 2) : 0;\r\n    if (!this._limitToEdges || scrollAvailable > minScrollAvailableToDetectByMiddle) { // detect the active index by the middle of the swiper element\r\n      const offset = swiperWidth / 2\r\n      for (const { position, width, index } of this._slides.values()) {\r\n        const leftLimit = offset - position - width;\r\n        const rightLimit = offset - position;\r\n        if (translate <= rightLimit && translate >= leftLimit) {\r\n          return index;\r\n        }\r\n      }\r\n      return undefined;\r\n    } else { // detect the index by the % of the total scroll available\r\n      const positionRatio = (translate / -scrollAvailable);\r\n      const index = Math.round(positionRatio * this._slideCount);\r\n      return Math.max(0, Math.min(this._slideCount - 1, index));\r\n    }\r\n  }\r\n\r\n  get index() {\r\n    return this._state.currentIndex;\r\n  }\r\n\r\n  get container() {\r\n    return this._swiperElement;\r\n  }\r\n\r\n  set index(index) {\r\n    this._setIndex(index);\r\n  }\r\n\r\n  /**\r\n   * setter for slide click callback\r\n   */\r\n  set slideClick(callback: (index: number, element: HTMLElement) => void) {\r\n    this._slideClick = callback;\r\n  }\r\n}"],"mappings":"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","names":["index"]}